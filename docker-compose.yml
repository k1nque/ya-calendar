version: '3.8'

services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - appnet

  redis:
    image: redis:7
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - appnet

  worker:
    build:
      context: .
      dockerfile: services/worker/Dockerfile
    env_file: .env
    volumes:
      - ./app:/app/app
      - ./services/worker:/app/services/worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - appnet

  celery:
    build:
      context: .
      dockerfile: services/celery_worker/Dockerfile
    env_file: .env
    volumes:
      - ./app:/app/app
      - ./services/celery_worker:/app/services/celery_worker
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - appnet

  bot:
    build:
      context: .
      dockerfile: services/bot/Dockerfile
    env_file: .env
    volumes:
      - ./app:/app/app
      - ./services/bot:/app/services/bot
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - appnet

volumes:
  pgdata:

networks:
  appnet:
    driver: bridge
