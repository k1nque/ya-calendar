"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Telegram-–±–æ—Ç–∞
"""
from __future__ import annotations

from collections.abc import Iterable
from typing import Final

from aiogram import F, types
from aiogram.exceptions import TelegramForbiddenError
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app import crud
from app.db import SessionLocal
from bot import bot, dp, logger
from filters import IsAdmin, IsAdminCallback

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
_PENDING_PAYMENT_SET: dict[int, int] = {}

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∏—Å–ª–æ —É—Ä–æ–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
_LESSONS_LIMIT: Final[int] = 20


def _format_students_list(students: Iterable, include_paid: bool = True) -> str:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤."""
    lines: list[str] = []
    for student in students:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if student.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        paid = f"\n  –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {student.paid_lessons_count}" if include_paid else ""
        lines.append(f"‚Ä¢ {student.summary}\n  –°—Ç–∞—Ç—É—Å: {status}{paid}")
    return "\n\n".join(lines)


def _build_students_keyboard(students, callback_template: str) -> InlineKeyboardBuilder:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ–Ω–∏–∫–∞–º–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º callback."""
    kb = InlineKeyboardBuilder()
    for student in students:
        status_display = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if student.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        kb.button(
            text=f"{student.summary} ({status_display})",
            callback_data=f"{callback_template}:{student.id}",
        )
    kb.adjust(1)
    return kb


def _build_payment_keyboard(student_id: int) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π."""
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï1", callback_data=f"payment_add:{student_id}:1")
    kb.button(text="‚ûï4", callback_data=f"payment_add:{student_id}:4")
    kb.button(text="‚ûï8", callback_data=f"payment_add:{student_id}:8")
    kb.button(text="‚ûï12", callback_data=f"payment_add:{student_id}:12")
    kb.button(text="‚ûñ1", callback_data=f"payment_subtract:{student_id}:1")
    kb.button(text="‚ûñ5", callback_data=f"payment_subtract:{student_id}:5")
    kb.button(text="üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ", callback_data=f"payment_set:{student_id}")
    kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="payment_back")
    kb.adjust(4, 2, 1, 1)
    return kb


@dp.message(F.text == "/start", IsAdmin)
async def cmd_start_admin(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    help_text = (
        "üîß –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/students ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤\n"
        "/inactive ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —É—á–µ–Ω–∏–∫–æ–≤\n"
        "/payment ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏\n"
        "/lessons ‚Äî –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É—Ä–æ–∫–∏\n"
        "\n–í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—á–µ–Ω–∏–∫–∞–º."
    )
    await message.answer(help_text)


@dp.message(F.text == "/help", IsAdmin)
async def cmd_help_admin(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    help_text = (
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/students ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π\n"
        "/inactive ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–µ–Ω–∏–∫–∞\n"
        "/payment ‚Äî –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —É—á–µ–Ω–∏–∫–∞–º\n"
        "/lessons ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–∫–∏ (–¥–æ 20)\n"
        "\nüîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
        "‚Ä¢ –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—á–µ–Ω–∏–∫—É\n"
        "‚Ä¢ Callback-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å"
    )
    await message.answer(help_text)


@dp.message(F.text == "/students", IsAdmin)
async def cmd_students(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤."""
    db = SessionLocal()
    try:
        students = crud.list_students(db)
        if not students:
            await message.answer("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ.")
            return
        response = "üìö –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤:\n\n" + _format_students_list(students)
        await message.answer(response)
    finally:
        db.close()


@dp.message(F.text == "/inactive", IsAdmin)
async def cmd_inactive(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —É—á–µ–Ω–∏–∫–æ–≤."""
    db = SessionLocal()
    try:
        students = crud.list_students(db)
        if not students:
            await message.answer("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ.")
            return
        kb = _build_students_keyboard(students, "toggle_active")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=kb.as_markup(),
        )
    finally:
        db.close()


@dp.message(F.text == "/lessons", IsAdmin)
async def cmd_lessons_admin(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–æ–≤."""
    db = SessionLocal()
    try:
        lessons = crud.get_upcoming_lessons(db, limit=_LESSONS_LIMIT)
        if not lessons:
            await message.answer("üìö –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.")
            return

        response_lines = [
            f"üìö –í—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É—Ä–æ–∫–∏ ({len(lessons)}):",
            "",
        ]
        for idx, lesson in enumerate(lessons, 1):
            start_str = lesson.start.strftime("%d.%m.%Y %H:%M")
            paid_mark = "‚úÖ" if lesson.is_paid else "‚è≥"
            student_name = lesson.student.summary if lesson.student else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            response_lines.append(f"{idx}. {paid_mark} {lesson.summary}")
            response_lines.append(f"   üë§ {student_name}")
            response_lines.append(f"   üìÖ {start_str}")
            response_lines.append(f"   üÜî ID: {lesson.id}\n")
        await message.answer("\n".join(response_lines).strip())
    finally:
        db.close()


@dp.callback_query(F.data.startswith("map:"), IsAdminCallback)
async def process_map(callback_query: types.CallbackQuery) -> None:
    """–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —É—á–µ–Ω–∏–∫—É."""
    data = callback_query.data.split(":")
    if len(data) != 3:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    tg_user_id = data[1]
    student_id = int(data[2])
    db = SessionLocal()
    try:
        student = crud.get_student_by_id(db, student_id)
        if not student:
            await callback_query.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        student_summary = student.summary
        crud.create_tg_link(db, tg_user_id, student_id)
        db.commit()
    finally:
        db.close()

    await callback_query.message.edit_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á–µ–Ω–∏–∫—É: {student_summary}", reply_markup=None
    )
    await callback_query.answer()

    try:
        await bot.send_message(int(tg_user_id), "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —É—á–µ–Ω–∏–∫. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except TelegramForbiddenError:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏", tg_user_id)


@dp.callback_query(F.data.startswith("toggle_active:"), IsAdminCallback)
async def process_toggle_active(callback_query: types.CallbackQuery) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–µ–Ω–∏–∫–∞."""
    data = callback_query.data.split(":")
    if len(data) != 2:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    student_id = int(data[1])
    db = SessionLocal()
    try:
        student = crud.toggle_student_active_status(db, student_id)
        if not student:
            await callback_query.answer("–û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        student_summary = student.summary
        status_text = "–∞–∫—Ç–∏–≤–µ–Ω" if student.is_active else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        students = crud.list_students(db)
        kb = _build_students_keyboard(students, "toggle_active")
    finally:
        db.close()

    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=kb.as_markup(),
    )
    await callback_query.answer(f"–°—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞ {student_summary} –∏–∑–º–µ–Ω–µ–Ω: —Ç–µ–ø–µ—Ä—å {status_text}")


@dp.message(F.text == "/payment", IsAdmin)
async def cmd_payment(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /payment ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏."""
    db = SessionLocal()
    try:
        students = crud.list_students(db)
        if not students:
            await message.answer("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ.")
            return
        kb = InlineKeyboardBuilder()
        for student in students:
            kb.button(
                text=f"{student.summary} ({student.paid_lessons_count} –æ–ø–ª–∞—á–µ–Ω–æ)",
                callback_data=f"payment_select:{student.id}",
            )
        kb.adjust(1)
        await message.answer(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏:",
            reply_markup=kb.as_markup(),
        )
    finally:
        db.close()


@dp.callback_query(F.data.startswith("payment_select:"), IsAdminCallback)
async def process_payment_select(callback_query: types.CallbackQuery) -> None:
    """–í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π."""
    data = callback_query.data.split(":")
    if len(data) != 2:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    student_id = int(data[1])
    db = SessionLocal()
    try:
        student = crud.get_student_by_id(db, student_id)
        if not student:
            await callback_query.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        student_summary = student.summary
        paid_count = student.paid_lessons_count
    finally:
        db.close()

    kb = _build_payment_keyboard(student_id)
    await callback_query.message.edit_text(
        f"üí∞ –£—á–µ–Ω–∏–∫: {student_summary}\n"
        f"–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {paid_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup(),
    )
    await callback_query.answer()


async def _apply_paid_lessons_change(callback_query: types.CallbackQuery, student_id: int, new_count: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    db = SessionLocal()
    try:
        updated_student = crud.update_student_paid_lessons(db, student_id, new_count)
        if not updated_student:
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            return
        summary = updated_student.summary
        paid_count = updated_student.paid_lessons_count
    finally:
        db.close()

    kb = _build_payment_keyboard(student_id)
    await callback_query.message.edit_text(
        f"üí∞ –£—á–µ–Ω–∏–∫: {summary}\n"
        f"–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {paid_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup(),
    )
    await callback_query.answer(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {paid_count}")


@dp.callback_query(F.data.startswith("payment_add:"), IsAdminCallback)
async def process_payment_add(callback_query: types.CallbackQuery) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π."""
    data = callback_query.data.split(":")
    if len(data) != 3:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    student_id = int(data[1])
    add_count = int(data[2])

    db = SessionLocal()
    try:
        student = crud.get_student_by_id(db, student_id)
        if not student:
            await callback_query.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        new_count = student.paid_lessons_count + add_count
    finally:
        db.close()

    await _apply_paid_lessons_change(callback_query, student_id, new_count)


@dp.callback_query(F.data.startswith("payment_subtract:"), IsAdminCallback)
async def process_payment_subtract(callback_query: types.CallbackQuery) -> None:
    """–í—ã—á–∏—Ç–∞–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π."""
    data = callback_query.data.split(":")
    if len(data) != 3:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    student_id = int(data[1])
    subtract_count = int(data[2])

    db = SessionLocal()
    try:
        student = crud.get_student_by_id(db, student_id)
        if not student:
            await callback_query.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        new_count = max(0, student.paid_lessons_count - subtract_count)
    finally:
        db.close()

    await _apply_paid_lessons_change(callback_query, student_id, new_count)


@dp.callback_query(F.data == "payment_back", IsAdminCallback)
async def process_payment_back(callback_query: types.CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—á–µ–Ω–∏–∫–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ /payment."""
    db = SessionLocal()
    try:
        students = crud.list_students(db)
        if not students:
            await callback_query.message.edit_text("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ.")
            return
        kb = InlineKeyboardBuilder()
        for student in students:
            kb.button(
                text=f"{student.summary} ({student.paid_lessons_count} –æ–ø–ª–∞—á–µ–Ω–æ)",
                callback_data=f"payment_select:{student.id}",
            )
        kb.adjust(1)
    finally:
        db.close()

    await callback_query.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏:",
        reply_markup=kb.as_markup(),
    )
    await callback_query.answer()


@dp.callback_query(F.data.startswith("payment_set:"), IsAdminCallback)
async def process_payment_set(callback_query: types.CallbackQuery) -> None:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π."""
    data = callback_query.data.split(":")
    if len(data) != 2:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    student_id = int(data[1])

    db = SessionLocal()
    try:
        student = crud.get_student_by_id(db, student_id)
        if not student:
            await callback_query.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        student_summary = student.summary
        paid_count = student.paid_lessons_count
    finally:
        db.close()

    admin_id = callback_query.from_user.id
    _PENDING_PAYMENT_SET[admin_id] = student_id

    await callback_query.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è {student_summary}.\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {paid_count}.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
    )
    await callback_query.answer("–û–∂–∏–¥–∞—é –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")


@dp.message(IsAdmin, F.text == "/cancel")
async def process_payment_set_cancel(message: types.Message) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π."""
    if message.from_user.id in _PENDING_PAYMENT_SET:
        _PENDING_PAYMENT_SET.pop(message.from_user.id, None)
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@dp.message(IsAdmin, F.text.regexp(r"^\d+$"))
async def process_payment_set_value(message: types.Message) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    admin_id = message.from_user.id
    if admin_id not in _PENDING_PAYMENT_SET:
        return

    new_value = int(message.text)
    student_id = _PENDING_PAYMENT_SET.pop(admin_id)

    db = SessionLocal()
    try:
        updated_student = crud.update_student_paid_lessons(db, student_id, new_value)
        if not updated_student:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞.")
            return
    finally:
        db.close()

    kb = _build_payment_keyboard(student_id)
    await message.answer(
        f"üí∞ –£—á–µ–Ω–∏–∫: {updated_student.summary}\n"
        f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {new_value}",
        reply_markup=kb.as_markup(),
    )
    logger.info(
        "Admin %s —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É—á–µ–Ω–∏–∫–∞ %s: %s",
        admin_id,
        updated_student.summary,
        new_value,
    )
