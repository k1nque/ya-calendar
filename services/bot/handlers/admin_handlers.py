"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
from aiogram import types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError

from bot import dp, bot
from filters import IsAdmin, IsAdminCallback
from app.db import SessionLocal
from app import crud


@dp.message(F.text == '/start', IsAdmin)
async def cmd_start_admin(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    help_text = """
üîß –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! 

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/students - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
/inactive - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —É—á–µ–Ω–∏–∫–æ–≤
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—á–µ–Ω–∏–∫–∞–º.
    """
    await message.answer(help_text.strip())


@dp.message(F.text == '/help', IsAdmin)
async def cmd_help_admin(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:

/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/students - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
/inactive - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —É—á–µ–Ω–∏–∫–æ–≤ (–≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å)
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
‚Ä¢ –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—á–µ–Ω–∏–∫—É
‚Ä¢ Callback-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å
    """
    await message.answer(help_text.strip())


@dp.message(F.text == '/students', IsAdmin)
async def cmd_students(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /students - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    db = SessionLocal()
    try:
        students = crud.list_students(db)
        if not students:
            await message.answer("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ.")
            return
        
        students_info = []
        for s in students:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if s.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            paid_lessons = s.paid_lessons_count
            students_info.append(f"‚Ä¢ {s.summary}\n  –°—Ç–∞—Ç—É—Å: {status}\n  –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {paid_lessons}")
        
        response = "üìö –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤:\n\n" + "\n\n".join(students_info)
        await message.answer(response)
    finally:
        db.close()


@dp.message(F.text == '/inactive', IsAdmin)
async def cmd_inactive(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /inactive –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db = SessionLocal()
    try:
        students = crud.list_students(db)
        if not students:
            await message.answer("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ.")
            return
        kb = InlineKeyboardBuilder()
        for s in students:
            status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if s.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            button_text = f"{s.summary} ({status_text})"
            kb.button(text=button_text, callback_data=f"toggle_active:{s.id}")
        kb.adjust(1)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=kb.as_markup())
    finally:
        db.close()


@dp.callback_query(F.data.startswith('map:'), IsAdminCallback)
async def process_map(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —É—á–µ–Ω–∏–∫–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    data = callback_query.data.split(':')
    if len(data) != 3:
        await callback_query.answer('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        return
    tg_user_id = data[1]
    student_id = int(data[2])
    db = SessionLocal()
    try:
        student = crud.get_student_by_id(db, student_id)
        if not student:
            await callback_query.answer('–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º summary –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        student_summary = student.summary
        crud.create_tg_link(db, tg_user_id, student_id)
        db.commit()
    finally:
        db.close()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    await callback_query.message.edit_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á–µ–Ω–∏–∫—É: {student_summary}",
        reply_markup=None
    )
    await callback_query.answer()
    
    try:
        await bot.send_message(int(tg_user_id), '–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —É—á–µ–Ω–∏–∫. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.')
    except TelegramForbiddenError:
        pass


@dp.callback_query(F.data.startswith('toggle_active:'), IsAdminCallback)
async def process_toggle_active(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    data = callback_query.data.split(':')
    if len(data) != 2:
        await callback_query.answer('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        return
    student_id = int(data[1])
    db = SessionLocal()
    try:
        student = crud.toggle_student_active_status(db, student_id)
        if not student:
            await callback_query.answer('–û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        student_summary = student.summary
        student_is_active = student.is_active
        
        status_text = "–∞–∫—Ç–∏–≤–µ–Ω" if student_is_active else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        await callback_query.answer(
            f"–°—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞ {student_summary} –∏–∑–º–µ–Ω–µ–Ω: —Ç–µ–ø–µ—Ä—å {status_text}"
        )
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        students = crud.list_students(db)
        kb = InlineKeyboardBuilder()
        for s in students:
            status_display = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if s.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            button_text = f"{s.summary} ({status_display})"
            kb.button(text=button_text, callback_data=f"toggle_active:{s.id}")
        kb.adjust(1)
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", 
            reply_markup=kb.as_markup()
        )
    finally:
        db.close()