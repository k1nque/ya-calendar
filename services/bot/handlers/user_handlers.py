"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from aiogram import types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import dp, bot, logger
from app.config import settings
from app.db import SessionLocal
from app import crud


@dp.message(F.text == '/start')
async def cmd_start_user(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∫–∞ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        student = crud.get_student_by_tg_user_id(db, str(message.from_user.id))
        logger.debug(f"Existing link for user {message.from_user.id}: {student}")
        if student:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º summary –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            student_summary = student.summary
            db.close()
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —É—á–µ–Ω–∏–∫—É: {student_summary}. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö.')
            return

        await message.answer('–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å. –ñ–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        students = crud.list_students(db)
        if not students:
            await bot.send_message(settings.ADMIN_TELEGRAM_ID, '–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            return
        kb = InlineKeyboardBuilder()
        for s in students:
            kb.button(text=s.summary, callback_data=f"map:{message.from_user.id}:{s.id}")
        kb.adjust(1)
        await bot.send_message(
            settings.ADMIN_TELEGRAM_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏–≤—è–∑–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:",
            reply_markup=kb.as_markup(),
        )
    finally:
        db.close()


@dp.message(F.text == '/lessons')
async def cmd_lessons(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —É—á–µ–Ω–∏–∫—É
        student = crud.get_student_by_tg_user_id(db, str(message.from_user.id))
        
        if not student:
            await message.answer(
                '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —É—á–µ–Ω–∏–∫—É.\n'
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        lessons = crud.get_lessons_for_student(db, student.id, upcoming_only=True, limit=10)
        
        if not lessons:
            await message.answer(
                f'üìö {student.summary}\n\n'
                f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n'
                f'–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {student.paid_lessons_count}'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Ä–æ–∫–æ–≤
        response = f'üìö –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É—Ä–æ–∫–∏ –¥–ª—è {student.summary}\n'
        response += f'üí≥ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {student.paid_lessons_count}\n\n'
        
        for i, lesson in enumerate(lessons, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            start_str = lesson.start.strftime('%d.%m.%Y %H:%M')
            paid_mark = '‚úÖ' if lesson.is_paid else '‚è≥'
            
            response += f'{i}. {paid_mark} {lesson.summary}\n'
            response += f'   üìÖ {start_str}\n'
            response += f'   üÜî ID: {lesson.id}\n\n'
        
        await message.answer(response)
        
    finally:
        db.close()